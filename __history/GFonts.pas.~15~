unit GFonts;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, OpenGL, DGLUT, Textures,command;


type
  FFont = record
    x,y,sim,Leg,a: integer;
 end;

//////----------------****************************************************---------------------------////

var
  cis:integer;
  Sim:array[1..196] of string;
  FontI:array[1..196] of FFont;

//////----------------****************************************************---------------------------////


procedure Enable_sun();
procedure Disable_sun();
procedure R3D_To_2D(ClientWidth, ClientHeight:integer);
procedure R2D_To_3D();


implementation
uses GUI,Resurce;


procedure Enable_sun();
begin
  glEnable(GL_LIGHTING);
  glEnable(GL_LIGHT0);
end;

//////----------------****************************************************---------------------------////

procedure Disable_sun();
begin
  glDisable(GL_LIGHTING);
  glDisable(GL_LIGHT0);
end;

//////----------------****************************************************---------------------------////

procedure Enable_Atest();
begin
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_NORMALIZE);
  glEnable(GL_COLOR_MATERIAL);
  glShadeModel(GL_SMOOTH);
end;

//////----------------****************************************************---------------------------////

procedure Disable_Atest();
begin
  glDisable(GL_NORMALIZE);
  glDisable(GL_COLOR_MATERIAL);
  glDisable(GL_DEPTH_TEST);
end;

//////----------------****************************************************---------------------------////

procedure SpriteButton(PX,PY,SX,SY:real;Pict:Uint; Key:integer);
var X,Y:integer;
begin
  GetCursorPos(Point);
  X:=-Form1.Left +Point.X;
  Y:=-Form1.Top-15  +point.Y;

  RenderSprite(PX,PY,SX,SY,0,Pict);
    if (X<px+sx) and (X>px-sx) then
      if (Y<py+sy) and (Y>py-sy) then
        if (GetAsyncKeyState(VK_LBUTTON)<>0) and (MBL=false) then
          begin
          if Key=10 then
            begin
              // RayCast();
            end;
          if Key<>10 then
            begin
             // MenuG.Stay:=Key;
            end;
            MBL:=true;
      end;
end;


//////----------------****************************************************---------------------------////



//////----------------****************************************************---------------------------////



//////----------------****************************************************---------------------------////

procedure R3D_To_2D(ClientWidth, ClientHeight:integer);
begin
  glPushMatrix;
  glLoadIdentity;
  glMatrixMode(GL_PROJECTION);
  glPushMatrix;
  glLoadIdentity;
  gluOrtho2D(0,ClientWidth, ClientHeight,0);
  glMatrixMode(GL_MODELVIEW);
end;

//////----------------****************************************************---------------------------////

procedure R2D_To_3D();
begin
  glMatrixMode(GL_PROJECTION);
  glPopMatrix;
  glMatrixMode(GL_MODELVIEW);
  glPopMatrix;
end;

end.